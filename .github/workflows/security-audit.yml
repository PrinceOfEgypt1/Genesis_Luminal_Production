name: Security Audit & Dependency Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Executar diariamente às 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      audit_level:
        description: 'Audit Level'
        required: true
        default: 'high'
        type: choice
        options:
        - low
        - moderate
        - high
        - critical

jobs:
  npm-audit:
    runs-on: ubuntu-latest
    name: NPM Security Audit
    
    strategy:
      matrix:
        workspace: [backend, frontend]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

    - name: Install dependencies
      run: |
        cd ${{ matrix.workspace }}
        npm ci

    - name: Run npm audit (high and critical only)
      run: |
        cd ${{ matrix.workspace }}
        echo "🔍 Running npm audit for ${{ matrix.workspace }}..."
        
        # Configurar nível de auditoria baseado no input ou padrão
        AUDIT_LEVEL="${{ github.event.inputs.audit_level || 'high' }}"
        
        # Executar audit com fail baseado no nível
        if [ "$AUDIT_LEVEL" = "critical" ]; then
          npm audit --audit-level critical
        elif [ "$AUDIT_LEVEL" = "high" ]; then
          npm audit --audit-level high
        elif [ "$AUDIT_LEVEL" = "moderate" ]; then
          npm audit --audit-level moderate
        else
          npm audit --audit-level low
        fi
        
        echo "✅ NPM audit passed for ${{ matrix.workspace }}"

    - name: Generate audit report
      run: |
        cd ${{ matrix.workspace }}
        echo "📊 Generating detailed audit report..."
        npm audit --json > audit-report-${{ matrix.workspace }}.json 2>/dev/null || true
        npm audit --parseable > audit-report-${{ matrix.workspace }}.txt 2>/dev/null || true
        
        # Gerar resumo human-readable
        cat > audit-summary-${{ matrix.workspace }}.md << 'SUMMARY_EOF'
        # Security Audit Report - ${{ matrix.workspace }}
        
        **Generated:** $(date)
        **Workspace:** ${{ matrix.workspace }}
        **Audit Level:** ${{ github.event.inputs.audit_level || 'high' }}
        
        ## Summary
        SUMMARY_EOF
        
        # Adicionar contagem de vulnerabilidades se existirem
        if [ -f "audit-report-${{ matrix.workspace }}.json" ]; then
          node -e "
            try {
              const audit = JSON.parse(require('fs').readFileSync('audit-report-${{ matrix.workspace }}.json', 'utf8'));
              if (audit.metadata) {
                const vulnerabilities = audit.metadata.vulnerabilities;
                console.log('- **Total vulnerabilities:** ' + (vulnerabilities.total || 0));
                console.log('- **Critical:** ' + (vulnerabilities.critical || 0));
                console.log('- **High:** ' + (vulnerabilities.high || 0));
                console.log('- **Moderate:** ' + (vulnerabilities.moderate || 0));
                console.log('- **Low:** ' + (vulnerabilities.low || 0));
              }
            } catch(e) {
              console.log('- **Status:** No vulnerabilities found');
            }
          " >> audit-summary-${{ matrix.workspace }}.md
        fi

    - name: Upload audit reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: npm-audit-reports-${{ matrix.workspace }}
        path: |
          ${{ matrix.workspace }}/audit-report-*.json
          ${{ matrix.workspace }}/audit-report-*.txt
          ${{ matrix.workspace }}/audit-summary-*.md
        retention-days: 30

  snyk-security:
    runs-on: ubuntu-latest
    name: Snyk Vulnerability Scanning
    if: github.event_name != 'schedule' # Evitar rate limits em execuções agendadas
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Snyk CLI
      run: npm install -g snyk

    - name: Authenticate Snyk
      run: snyk auth ${{ secrets.SNYK_TOKEN }}
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Run Snyk test for backend
      run: |
        cd backend
        echo "🔍 Running Snyk security test for backend..."
        snyk test --severity-threshold=high --json > ../snyk-backend-report.json || true
        snyk test --severity-threshold=high

    - name: Run Snyk test for frontend
      run: |
        cd frontend
        echo "🔍 Running Snyk security test for frontend..."
        snyk test --severity-threshold=high --json > ../snyk-frontend-report.json || true
        snyk test --severity-threshold=high

    - name: Run Snyk code analysis
      run: |
        echo "🔍 Running Snyk code analysis..."
        snyk code test --severity-threshold=high || true

    - name: Generate Snyk monitor
      if: github.ref == 'refs/heads/main'
      run: |
        echo "📊 Monitoring project with Snyk..."
        cd backend && snyk monitor --project-name="genesis-luminal-backend" || true
        cd ../frontend && snyk monitor --project-name="genesis-luminal-frontend" || true

    - name: Upload Snyk reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: snyk-security-reports
        path: |
          snyk-*-report.json
        retention-days: 30

  codeql-analysis:
    runs-on: ubuntu-latest
    name: CodeQL Security Analysis
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql-config.yml

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{ matrix.language }}"

  semgrep-analysis:
    runs-on: ubuntu-latest
    name: Semgrep Static Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/nodejs
          p/typescript
          p/react
        generateSarif: "1"

    - name: Upload Semgrep results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  generate-sbom:
    runs-on: ubuntu-latest
    name: Generate Software Bill of Materials
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install CycloneDX CLI
      run: npm install -g @cyclonedx/cyclonedx-npm

    - name: Generate SBOM for backend
      run: |
        cd backend
        echo "📋 Generating SBOM for backend..."
        cyclonedx-npm --output-format json --output-file ../sbom-backend.json
        cyclonedx-npm --output-format xml --output-file ../sbom-backend.xml

    - name: Generate SBOM for frontend
      run: |
        cd frontend
        echo "📋 Generating SBOM for frontend..."
        cyclonedx-npm --output-format json --output-file ../sbom-frontend.json
        cyclonedx-npm --output-format xml --output-file ../sbom-frontend.xml

    - name: Generate combined SBOM metadata
      run: |
        echo "📊 Generating SBOM metadata..."
        cat > sbom-metadata.json << 'SBOM_EOF'
        {
          "bomFormat": "CycloneDX",
          "specVersion": "1.4",
          "serialNumber": "urn:uuid:$(uuidgen)",
          "version": 1,
          "metadata": {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "tools": [
              {
                "vendor": "CycloneDX",
                "name": "@cyclonedx/cyclonedx-npm"
              }
            ],
            "component": {
              "type": "application",
              "name": "genesis-luminal",
              "version": "1.0.0",
              "description": "Genesis Luminal - Transcendental AI Experience"
            }
          }
        }
        SBOM_EOF

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: software-bill-of-materials
        path: |
          sbom-*.json
          sbom-*.xml
          sbom-metadata.json
        retention-days: 90

  dependency-review:
    runs-on: ubuntu-latest
    name: Dependency Review
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: high
        allow-ghsas: |
          GHSA-1234-5678-9abc
        deny-licenses: |
          GPL-2.0
          GPL-3.0

  security-summary:
    runs-on: ubuntu-latest
    name: Security Summary Report
    needs: [npm-audit, snyk-security, codeql-analysis, semgrep-analysis, generate-sbom]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate security summary
      run: |
        echo "📊 Generating comprehensive security summary..."
        
        cat > security-summary.md << 'SUMMARY_EOF'
        # 🔒 Genesis Luminal - Security Audit Summary
        
        **Date:** $(date)
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        **Triggered by:** ${{ github.event_name }}
        
        ## 🎯 Audit Results Overview
        
        | Component | Status | Details |
        |-----------|--------|---------|
        SUMMARY_EOF
        
        # Verificar resultados dos jobs
        if [ "${{ needs.npm-audit.result }}" = "success" ]; then
          echo "| NPM Audit | ✅ PASS | No high/critical vulnerabilities found |" >> security-summary.md
        else
          echo "| NPM Audit | ❌ FAIL | High/critical vulnerabilities detected |" >> security-summary.md
        fi
        
        if [ "${{ needs.snyk-security.result }}" = "success" ]; then
          echo "| Snyk Scan | ✅ PASS | No high-severity issues found |" >> security-summary.md
        else
          echo "| Snyk Scan | ⚠️ WARN | Check Snyk reports for details |" >> security-summary.md
        fi
        
        if [ "${{ needs.codeql-analysis.result }}" = "success" ]; then
          echo "| CodeQL | ✅ PASS | No security vulnerabilities found |" >> security-summary.md
        else
          echo "| CodeQL | ⚠️ WARN | Check CodeQL results for details |" >> security-summary.md
        fi
        
        if [ "${{ needs.semgrep-analysis.result }}" = "success" ]; then
          echo "| Semgrep | ✅ PASS | No security issues found |" >> security-summary.md
        else
          echo "| Semgrep | ⚠️ WARN | Check Semgrep results for details |" >> security-summary.md
        fi
        
        if [ "${{ needs.generate-sbom.result }}" = "success" ]; then
          echo "| SBOM Generation | ✅ PASS | Software Bill of Materials generated |" >> security-summary.md
        else
          echo "| SBOM Generation | ❌ FAIL | Failed to generate SBOM |" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## 📋 Next Steps" >> security-summary.md
        echo "" >> security-summary.md
        echo "1. Review any failed checks above" >> security-summary.md
        echo "2. Download artifacts to see detailed reports" >> security-summary.md
        echo "3. Address high-priority vulnerabilities" >> security-summary.md
        echo "4. Update dependencies as needed" >> security-summary.md
        echo "" >> security-summary.md
        echo "## 🔗 Resources" >> security-summary.md
        echo "" >> security-summary.md
        echo "- [Security Policy](../security/SECURITY.md)" >> security-summary.md
        echo "- [Dependency Review Guidelines](../docs/DEPENDENCY_REVIEW.md)" >> security-summary.md
        echo "- [Incident Response Plan](../security/INCIDENT_RESPONSE.md)" >> security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-report
        path: security-summary.md
        retention-days: 30

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
