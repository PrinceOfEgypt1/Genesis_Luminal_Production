# ========================================
# Genesis Luminal Production - CI/CD Pipeline Enterprise
# Implementa Quality Gates obrigatórios para produção
# Coverage mínimo: 60% | Build: obrigatório | Testes: 100% pass
# ========================================

name: Genesis Luminal CI/CD Enterprise

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: 60

jobs:
  # ==========================================
  # JOB 1: QUALITY GATES - BACKEND
  # ==========================================
  backend-quality-gates:
    name: Backend Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 📦 Install Backend Dependencies
      working-directory: backend
      run: npm ci

    - name: 🔍 TypeScript Type Check
      working-directory: backend
      run: npm run type-check

    - name: 🧹 ESLint Code Quality
      working-directory: backend
      run: npm run lint

    - name: 🧪 Run Unit Tests
      working-directory: backend
      run: npm test -- --coverage --watchAll=false

    - name: 📊 Check Coverage Threshold
      working-directory: backend
      run: |
        COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
        echo "Current coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below threshold $COVERAGE_THRESHOLD%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets threshold $COVERAGE_THRESHOLD%"
        fi

    - name: 🏗️ Build Backend
      working-directory: backend
      run: npm run build

    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # ==========================================
  # JOB 2: QUALITY GATES - FRONTEND
  # ==========================================
  frontend-quality-gates:
    name: Frontend Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install Frontend Dependencies
      working-directory: frontend
      run: npm ci

    - name: 🔍 TypeScript Type Check
      working-directory: frontend
      run: npm run type-check

    - name: 🧹 ESLint Code Quality
      working-directory: frontend
      run: npm run lint

    - name: 🧪 Run Frontend Tests
      working-directory: frontend
      run: npm test -- --coverage --watchAll=false

    - name: 🏗️ Build Frontend
      working-directory: frontend
      run: npm run build

    - name: 📏 Bundle Size Analysis
      working-directory: frontend
      run: |
        BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
        echo "Bundle size: $BUNDLE_SIZE"
        # Add bundle size validation logic here

  # ==========================================
  # JOB 3: INTEGRATION TESTS
  # ==========================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-quality-gates, frontend-quality-gates]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: 🚀 Start Backend Server
      working-directory: backend
      run: |
        npm run build
        nohup npm start &
        sleep 10

    - name: 🧪 Run Integration Tests
      working-directory: backend
      run: npm run test:integration

    - name: 🔍 API Health Check
      run: |
        curl -f http://localhost:3001/api/health || exit 1
        curl -f http://localhost:3001/metrics || exit 1

  # ==========================================
  # JOB 4: SECURITY SCANNING
  # ==========================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔒 Run npm audit
      run: |
        cd backend && npm audit --audit-level=moderate
        cd ../frontend && npm audit --audit-level=moderate

    - name: 🔍 CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # ==========================================
  # JOB 5: PERFORMANCE TESTING
  # ==========================================
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: 🚀 Start Services
      run: |
        cd backend && npm run build && nohup npm start &
        cd ../frontend && nohup npm run dev &
        sleep 15

    - name: 🏃 Lighthouse CI Performance Audit
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: '.lighthouserc.json'
        uploadArtifacts: true

  # ==========================================
  # JOB 6: DEPLOYMENT (se todos os gates passarem)
  # ==========================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🚀 Deploy Success Notification
      run: |
        echo "🎉 All quality gates passed!"
        echo "📊 Coverage: ≥${{ env.COVERAGE_THRESHOLD }}%"
        echo "🔒 Security: Clean"
        echo "⚡ Performance: Validated"
        echo "🚀 Ready for production deployment"

  # ==========================================
  # JOB 7: QUALITY REPORT
  # ==========================================
  quality-report:
    name: Quality Report
    runs-on: ubuntu-latest
    needs: [backend-quality-gates, frontend-quality-gates, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: 📊 Generate Quality Report
      run: |
        echo "# Genesis Luminal Quality Report" > quality-report.md
        echo "## Sprint 6: Fundação de Qualidade" >> quality-report.md
        echo "- Backend Tests: ${{ needs.backend-quality-gates.result }}" >> quality-report.md
        echo "- Frontend Tests: ${{ needs.frontend-quality-gates.result }}" >> quality-report.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> quality-report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> quality-report.md
        echo "- Coverage Threshold: ${{ env.COVERAGE_THRESHOLD }}%" >> quality-report.md
        
    - name: 📤 Upload Quality Report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.md
