#!/bin/bash

# ========================================
# GENESIS LUMINAL - SBOM GENERATOR
# Script para gerar Software Bill of Materials
# ========================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üìã GENESIS LUMINAL - SBOM GENERATOR${NC}"
echo "========================================"

# Verificar se CycloneDX est√° instalado
if ! command -v cyclonedx-npm &> /dev/null; then
    echo -e "${YELLOW}[INFO]${NC} Installing CycloneDX CLI..."
    npm install -g @cyclonedx/cyclonedx-npm
fi

# Criar diret√≥rio para SBOM
mkdir -p sbom
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

echo -e "${BLUE}üìä Generating SBOM files...${NC}"

# Gerar SBOM para backend
if [ -d "backend" ]; then
    echo -e "${YELLOW}üì¶ Generating SBOM for backend...${NC}"
    cd backend
    
    cyclonedx-npm --output-format json --output-file "../sbom/backend-sbom-$TIMESTAMP.json"
    cyclonedx-npm --output-format xml --output-file "../sbom/backend-sbom-$TIMESTAMP.xml"
    
    echo -e "${GREEN}‚úÖ Backend SBOM generated${NC}"
    cd ..
fi

# Gerar SBOM para frontend
if [ -d "frontend" ]; then
    echo -e "${YELLOW}üì¶ Generating SBOM for frontend...${NC}"
    cd frontend
    
    cyclonedx-npm --output-format json --output-file "../sbom/frontend-sbom-$TIMESTAMP.json"
    cyclonedx-npm --output-format xml --output-file "../sbom/frontend-sbom-$TIMESTAMP.xml"
    
    echo -e "${GREEN}‚úÖ Frontend SBOM generated${NC}"
    cd ..
fi

# Gerar metadados combinados
echo -e "${YELLOW}üìä Generating combined metadata...${NC}"

cat > "sbom/sbom-metadata-$TIMESTAMP.json" << METADATA_EOF
{
  "bomFormat": "CycloneDX",
  "specVersion": "1.4",
  "serialNumber": "urn:uuid:$(uuidgen 2>/dev/null || echo "$(date +%s)-$(shuf -i 1000-9999 -n 1)")",
  "version": 1,
  "metadata": {
    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
    "tools": [
      {
        "vendor": "CycloneDX",
        "name": "@cyclonedx/cyclonedx-npm",
        "version": "$(npm list -g @cyclonedx/cyclonedx-npm --depth=0 2>/dev/null | grep cyclonedx-npm | sed 's/.*@cyclonedx\/cyclonedx-npm@//' | sed 's/ .*//' || echo 'unknown')"
      }
    ],
    "component": {
      "type": "application",
      "name": "genesis-luminal",
      "version": "1.0.0",
      "description": "Genesis Luminal - Transcendental AI Experience",
      "licenses": [
        {
          "license": {
            "id": "MIT"
          }
        }
      ]
    }
  },
  "components": [],
  "dependencies": []
}
METADATA_EOF

# Gerar relat√≥rio de componentes
echo -e "${YELLOW}üìã Generating component report...${NC}"

cat > "sbom/component-report-$TIMESTAMP.md" << REPORT_EOF
# üìã Software Bill of Materials - Component Report

**Generated:** $(date)
**Project:** Genesis Luminal
**Version:** 1.0.0

## üìä Summary

This report provides an overview of all software components included in the Genesis Luminal project.

### Generated Files

REPORT_EOF

ls -la sbom/*-$TIMESTAMP.* | while read line; do
    filename=$(echo "$line" | awk '{print $NF}' | xargs basename)
    size=$(echo "$line" | awk '{print $5}')
    echo "- **$filename** ($size bytes)" >> "sbom/component-report-$TIMESTAMP.md"
done

echo "" >> "sbom/component-report-$TIMESTAMP.md"
echo "### Backend Components" >> "sbom/component-report-$TIMESTAMP.md"

if [ -f "sbom/backend-sbom-$TIMESTAMP.json" ]; then
    echo "Component count: $(cat "sbom/backend-sbom-$TIMESTAMP.json" | node -e "
        try {
            const sbom = JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8'));
            console.log(sbom.components ? sbom.components.length : 0);
        } catch(e) {
            console.log('Error reading SBOM');
        }
    " 2>/dev/null || echo "Unknown")" >> "sbom/component-report-$TIMESTAMP.md"
fi

echo "" >> "sbom/component-report-$TIMESTAMP.md"
echo "### Frontend Components" >> "sbom/component-report-$TIMESTAMP.md"

if [ -f "sbom/frontend-sbom-$TIMESTAMP.json" ]; then
    echo "Component count: $(cat "sbom/frontend-sbom-$TIMESTAMP.json" | node -e "
        try {
            const sbom = JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8'));
            console.log(sbom.components ? sbom.components.length : 0);
        } catch(e) {
            console.log('Error reading SBOM');
        }
    " 2>/dev/null || echo "Unknown")" >> "sbom/component-report-$TIMESTAMP.md"
fi

echo "" >> "sbom/component-report-$TIMESTAMP.md"
echo "## üîó Standards Compliance" >> "sbom/component-report-$TIMESTAMP.md"
echo "" >> "sbom/component-report-$TIMESTAMP.md"
echo "- **Format:** CycloneDX" >> "sbom/component-report-$TIMESTAMP.md"
echo "- **Specification Version:** 1.4" >> "sbom/component-report-$TIMESTAMP.md"
echo "- **Generated By:** @cyclonedx/cyclonedx-npm" >> "sbom/component-report-$TIMESTAMP.md"

# Criar links simb√≥licos para os arquivos mais recentes
ln -sf "backend-sbom-$TIMESTAMP.json" sbom/backend-sbom-latest.json
ln -sf "frontend-sbom-$TIMESTAMP.json" sbom/frontend-sbom-latest.json
ln -sf "sbom-metadata-$TIMESTAMP.json" sbom/sbom-metadata-latest.json
ln -sf "component-report-$TIMESTAMP.md" sbom/component-report-latest.md

echo -e "${GREEN}‚úÖ SBOM generation completed successfully!${NC}"
echo -e "${BLUE}üìÅ Files generated in: sbom/${NC}"
echo -e "${BLUE}üìä Component report: sbom/component-report-$TIMESTAMP.md${NC}"

# Mostrar resumo
echo -e "${YELLOW}üìã GENERATED FILES:${NC}"
ls -la sbom/*-$TIMESTAMP.*

echo -e "${YELLOW}üìã LATEST LINKS:${NC}"
ls -la sbom/*-latest.*

------------------------------------------------------------------------------------------------------------------------